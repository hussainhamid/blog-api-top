// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

//prod db neon

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId   Int        @default(autoincrement())
  id       String     @id @default(uuid())
  username String     @unique
  email    String?
  password String
  status   Role       @default(reader)
  Comments Comments[]
  articles Articles[]
}

model Comments {
  id              Int      @id @default(autoincrement())
  commentSerialId String   @unique @default(uuid())
  comment         String
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  article         Articles @relation(fields: [articleId], references: [articleSerialId], onDelete: Cascade)
  articleId       String
}

model Articles {
  id              Int        @id @default(autoincrement())
  articleSerialId String     @unique @default(uuid())
  title           String
  content         String
  createdAt       DateTime   @default(now())
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  status          Status     @default(published)
  comments        Comments[]
}

enum Role {
  reader
  writer
}

enum Status {
  published
  notPublished
}
